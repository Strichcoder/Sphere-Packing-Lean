import Mathlib.Analysis.Complex.LocallyUniformLimit
import Mathlib.Analysis.Complex.UpperHalfPlane.Basic
import Mathlib.Analysis.Complex.UpperHalfPlane.FunctionsBoundedAtInfty
import Mathlib.Analysis.Complex.UpperHalfPlane.Manifold
import Mathlib.Geometry.Manifold.MFDeriv.FDeriv
import Mathlib.Geometry.Manifold.SmoothManifoldWithCorners
import Mathlib.NumberTheory.ModularForms.Basic
import Mathlib.NumberTheory.ModularForms.CongruenceSubgroups
import Mathlib.NumberTheory.ModularForms.SlashInvariantForms
import Mathlib.NumberTheory.ModularForms.JacobiTheta.OneVariable
import Mathlib.NumberTheory.ModularForms.JacobiTheta.TwoVariable

import SpherePacking.ModularForms.SlashActionAuxil
import SpherePacking.ForMathlib.UpperHalfPlane
import SpherePacking.ForMathlib.SlashActions

/-!
# Jacobi theta functions

Define Jacobi theta functions Œò‚ÇÇ, Œò‚ÇÉ, Œò‚ÇÑ and their fourth powers H‚ÇÇ, H‚ÇÉ, H‚ÇÑ.
Prove that H‚ÇÇ, H‚ÇÉ, H‚ÇÑ are modualar forms of weight 2 and level Œì(2).
Also Jacobi identity: Œò‚ÇÇ^4 + Œò‚ÇÑ^4 = Œò‚ÇÉ^4.
-/

open UpperHalfPlane hiding I
open Complex Real Asymptotics Filter Topology Manifold SlashInvariantForm Matrix ModularGroup
  ModularForm MatrixGroups SlashAction

local notation "GL(" n ", " R ")" "‚Å∫" => Matrix.GLPos (Fin n) R
local notation "Œì " n:100 => CongruenceSubgroup.Gamma n

/-- Define Œò‚ÇÇ, Œò‚ÇÉ, Œò‚ÇÑ as series. -/
noncomputable def Œò‚ÇÇ (œÑ : ‚ÑÇ) : ‚ÑÇ := ‚àë' n : ‚Ñ§, cexp (œÄ * I * (n + 1 / 2 : ‚ÑÇ) ^ 2 * œÑ)
noncomputable def Œò‚ÇÉ (œÑ : ‚ÑÇ) : ‚ÑÇ := ‚àë' n : ‚Ñ§, cexp (œÄ * I * (n : ‚ÑÇ) ^ 2 * œÑ)
noncomputable def Œò‚ÇÑ (œÑ : ‚ÑÇ) : ‚ÑÇ := ‚àë' n : ‚Ñ§, (-1) ^ n * cexp (œÄ * I * (n : ‚ÑÇ) ^ 2 * œÑ)
noncomputable def H‚ÇÇ (œÑ : ‚Ñç) : ‚ÑÇ := (Œò‚ÇÇ œÑ) ^ 4
noncomputable def H‚ÇÉ (œÑ : ‚Ñç) : ‚ÑÇ := (Œò‚ÇÉ œÑ) ^ 4
noncomputable def H‚ÇÑ (œÑ : ‚Ñç) : ‚ÑÇ := (Œò‚ÇÑ œÑ) ^ 4

/-- Theta functions as specializations of jacobiTheta‚ÇÇ -/
theorem Œò‚ÇÇ_as_jacobiTheta‚ÇÇ (œÑ : ‚ÑÇ) (hœÑ : 0 < œÑ.im) :
    Œò‚ÇÇ œÑ = cexp (œÄ * I * œÑ / 4) * jacobiTheta‚ÇÇ (-œÑ/2) œÑ := by
  simp_rw [Œò‚ÇÇ, jacobiTheta‚ÇÇ, jacobiTheta‚ÇÇ_term, ‚Üê smul_eq_mul (a := cexp _)]
  rw [‚Üê (Equiv.subRight 1).tsum_eq, ‚Üê tsum_const_smul]
  ¬∑ simp_rw [Equiv.subRight_apply]
    apply tsum_congr
    intro b
    have : ((b - 1 : ‚Ñ§) : ‚ÑÇ) + 1 / 2 = b - 1 / 2 := by
      push_cast
      nth_rw 1 [‚Üê add_halves 1]
      ring_nf
    rw [this, smul_eq_mul, ‚Üê Complex.exp_add]
    ring_nf
  ¬∑ exact (summable_jacobiTheta‚ÇÇ_term_iff _ _).mpr hœÑ

theorem Œò‚ÇÉ_as_jacobiTheta‚ÇÇ (œÑ : ‚ÑÇ) : Œò‚ÇÉ œÑ = jacobiTheta‚ÇÇ (0 : ‚ÑÇ) œÑ := by
  simp_rw [Œò‚ÇÉ, jacobiTheta‚ÇÇ, jacobiTheta‚ÇÇ_term, mul_zero, zero_add]

theorem Œò‚ÇÑ_as_jacobiTheta‚ÇÇ (œÑ : ‚ÑÇ) : Œò‚ÇÑ œÑ = jacobiTheta‚ÇÇ (1 / 2 : ‚ÑÇ) œÑ := by
  simp_rw [Œò‚ÇÑ, jacobiTheta‚ÇÇ, jacobiTheta‚ÇÇ_term]
  apply tsum_congr
  intro b
  ring_nf
  rw [Complex.exp_add, ‚Üê exp_pi_mul_I, ‚Üê exp_int_mul, mul_comm (b : ‚ÑÇ)]

/-- Slash action of various elements on H‚ÇÇ, H‚ÇÉ, H‚ÇÑ -/
lemma H‚ÇÇ_negI_action : (H‚ÇÇ ‚à£[(2 : ‚Ñ§)] negI) = H‚ÇÇ := even_weight_negI_action H‚ÇÇ (2: ‚Ñ§) even_two
lemma H‚ÇÉ_negI_action : (H‚ÇÉ ‚à£[(2 : ‚Ñ§)] negI) = H‚ÇÉ := even_weight_negI_action H‚ÇÉ (2: ‚Ñ§) even_two
lemma H‚ÇÑ_negI_action : (H‚ÇÑ ‚à£[(2 : ‚Ñ§)] negI) = H‚ÇÑ := even_weight_negI_action H‚ÇÑ (2: ‚Ñ§) even_two

lemma H‚ÇÇ_T_action : (H‚ÇÇ ‚à£[(2 : ‚Ñ§)] T) = -H‚ÇÇ := by sorry
lemma H‚ÇÉ_T_action : (H‚ÇÉ ‚à£[(2 : ‚Ñ§)] T) = H‚ÇÑ := by sorry
lemma H‚ÇÑ_T_action : (H‚ÇÑ ‚à£[(2 : ‚Ñ§)] T) = H‚ÇÉ := by sorry

lemma H‚ÇÇ_T_inv_action : (H‚ÇÇ ‚à£[(2 : ‚Ñ§)] T‚Åª¬π) = -H‚ÇÇ := by
  nth_rw 1 [‚Üê neg_eq_iff_eq_neg.mpr H‚ÇÇ_T_action, neg_slash, ‚Üê slash_mul, mul_inv_self, slash_one]
lemma H‚ÇÉ_T_inv_action : (H‚ÇÉ ‚à£[(2 : ‚Ñ§)] T‚Åª¬π) = H‚ÇÑ := by
  nth_rw 1 [‚Üê H‚ÇÑ_T_action, ‚Üê slash_mul, mul_inv_self, slash_one]
lemma H‚ÇÑ_T_inv_action : (H‚ÇÑ ‚à£[(2 : ‚Ñ§)] T‚Åª¬π) = H‚ÇÉ := by
  nth_rw 1 [‚Üê H‚ÇÉ_T_action, ‚Üê slash_mul, mul_inv_self, slash_one]

/-- Use Œ± = T * T -/
lemma H‚ÇÇ_Œ±_action : (H‚ÇÇ ‚à£[(2 : ‚Ñ§)] Œ±) = H‚ÇÇ := by
  simp [Œ±_eq_T_sq, ‚Üê SL_slash, sq, slash_mul, H‚ÇÇ_T_action]

lemma H‚ÇÉ_Œ±_action : (H‚ÇÉ ‚à£[(2 : ‚Ñ§)] Œ±) = H‚ÇÉ := by
  simp [Œ±_eq_T_sq, ‚Üê SL_slash, sq, slash_mul, H‚ÇÉ_T_action, H‚ÇÑ_T_action]

lemma H‚ÇÑ_Œ±_action : (H‚ÇÑ ‚à£[(2 : ‚Ñ§)] Œ±) = H‚ÇÑ := by
  simp [Œ±_eq_T_sq, ‚Üê SL_slash, sq, slash_mul, H‚ÇÉ_T_action, H‚ÇÑ_T_action]

/-- Use jacobiTheta‚ÇÇ_functional_equation -/
lemma H‚ÇÇ_S_action : (H‚ÇÇ ‚à£[(2 : ‚Ñ§)] S) = - H‚ÇÑ := by
  sorry

lemma H‚ÇÉ_S_action : (H‚ÇÉ ‚à£[(2 : ‚Ñ§)] S) = - H‚ÇÉ := by
  sorry

lemma H‚ÇÑ_S_action : (H‚ÇÑ ‚à£[(2 : ‚Ñ§)] S) = - H‚ÇÇ := by
  have : S * S = -1 := by ext i j; simp [S]; fin_cases i <;> fin_cases j <;> simp
  rw [‚Üê neg_eq_iff_eq_neg.mpr H‚ÇÇ_S_action, neg_slash, ‚Üê slash_mul, this,
    ModularForm.slash_neg' _ _ (by decide), slash_one]

/-- Use Œ≤ = -S * Œ±^(-1) * S -/
lemma H‚ÇÇ_Œ≤_action : (H‚ÇÇ ‚à£[(2 : ‚Ñ§)] Œ≤) = H‚ÇÇ := calc
  _ = (((H‚ÇÇ ‚à£[(2 : ‚Ñ§)] negI) ‚à£[(2 : ‚Ñ§)] S) ‚à£[(2 : ‚Ñ§)] Œ±‚Åª¬π) ‚à£[(2 : ‚Ñ§)] S := by
    simp [Œ≤_eq_negI_mul_S_mul_Œ±_inv_mul_S, ‚Üê SL_slash, slash_mul]
  _ = _ := by
    rw [H‚ÇÇ_negI_action, H‚ÇÇ_S_action, neg_slash, neg_slash, Œ±_eq_T_sq, subgroup_slash]
    simp [‚Üê SL_slash, sq, slash_mul, H‚ÇÑ_T_inv_action, H‚ÇÉ_T_inv_action, H‚ÇÑ_S_action]

lemma H‚ÇÉ_Œ≤_action : (H‚ÇÉ ‚à£[(2 : ‚Ñ§)] Œ≤) = H‚ÇÉ := calc
  _ = (((H‚ÇÉ ‚à£[(2 : ‚Ñ§)] negI) ‚à£[(2 : ‚Ñ§)] S) ‚à£[(2 : ‚Ñ§)] Œ±‚Åª¬π) ‚à£[(2 : ‚Ñ§)] S := by
    simp [Œ≤_eq_negI_mul_S_mul_Œ±_inv_mul_S, ‚Üê SL_slash, slash_mul]
  _ = _ := by
    rw [H‚ÇÉ_negI_action, H‚ÇÉ_S_action, neg_slash, neg_slash, Œ±_eq_T_sq, subgroup_slash]
    simp [‚Üê SL_slash, sq, slash_mul, H‚ÇÑ_T_inv_action, H‚ÇÉ_T_inv_action, H‚ÇÉ_S_action]

lemma H‚ÇÑ_Œ≤_action : (H‚ÇÑ ‚à£[(2 : ‚Ñ§)] Œ≤) = H‚ÇÑ := calc
  _ = (((H‚ÇÑ ‚à£[(2 : ‚Ñ§)] negI) ‚à£[(2 : ‚Ñ§)] S) ‚à£[(2 : ‚Ñ§)] Œ±‚Åª¬π) ‚à£[(2 : ‚Ñ§)] S := by
    simp [Œ≤_eq_negI_mul_S_mul_Œ±_inv_mul_S, ‚Üê SL_slash, slash_mul]
  _ = _ := by
    rw [H‚ÇÑ_negI_action, H‚ÇÑ_S_action, neg_slash, neg_slash, Œ±_eq_T_sq, subgroup_slash]
    simp [‚Üê SL_slash, sq, slash_mul, H‚ÇÇ_T_inv_action, H‚ÇÇ_S_action]

/-- H‚ÇÇ, H‚ÇÉ, H‚ÇÑ are modular forms of weight 2 and level Œì(2) -/
noncomputable def H‚ÇÇ_SIF : SlashInvariantForm (Œì 2) 2 where
  toFun := H‚ÇÇ
  slash_action_eq' := slashaction_generators_Œì2 H‚ÇÇ (2 : ‚Ñ§) H‚ÇÇ_Œ±_action H‚ÇÇ_Œ≤_action H‚ÇÇ_negI_action

noncomputable def H‚ÇÉ_SIF : SlashInvariantForm (Œì 2) 2 where
  toFun := H‚ÇÉ
  slash_action_eq' := slashaction_generators_Œì2 H‚ÇÉ (2 : ‚Ñ§) H‚ÇÉ_Œ±_action H‚ÇÉ_Œ≤_action H‚ÇÉ_negI_action

noncomputable def H‚ÇÑ_SIF : SlashInvariantForm (Œì 2) 2 where
  toFun := H‚ÇÑ
  slash_action_eq' := slashaction_generators_Œì2 H‚ÇÑ (2 : ‚Ñ§) H‚ÇÑ_Œ±_action H‚ÇÑ_Œ≤_action H‚ÇÑ_negI_action


open UpperHalfPlane

noncomputable def H‚ÇÇ_SIF_MDifferentiable : MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) H‚ÇÇ_SIF := by sorry

noncomputable def H‚ÇÉ_SIF_MDifferentiable : MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) H‚ÇÉ_SIF := by sorry

noncomputable def H‚ÇÑ_SIF_MDifferentiable : MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) H‚ÇÑ_SIF := by sorry

theorem isBoundedAtImInfty_H‚ÇÇ_SIF
    (A : SL(2, ‚Ñ§)) : IsBoundedAtImInfty (H‚ÇÇ_SIF.toFun ‚à£[(2:‚Ñ§)] A) := by sorry

theorem isBoundedAtImInfty_H‚ÇÉ_SIF
    (A : SL(2, ‚Ñ§)) : IsBoundedAtImInfty (H‚ÇÉ_SIF.toFun ‚à£[(2:‚Ñ§)] A) := by sorry

theorem isBoundedAtImInfty_H‚ÇÑ_SIF
    (A : SL(2, ‚Ñ§)) : IsBoundedAtImInfty (H‚ÇÑ_SIF.toFun ‚à£[(2:‚Ñ§)] A) := by sorry


noncomputable def H‚ÇÇ_MF : ModularForm (Œì 2) 2 := {
  H‚ÇÇ_SIF with
  holo' := H‚ÇÇ_SIF_MDifferentiable
  bdd_at_infty' := isBoundedAtImInfty_H‚ÇÇ_SIF
}

noncomputable def H‚ÇÉ_MF : ModularForm (Œì 2) 2 := {
  H‚ÇÉ_SIF with
  holo' := H‚ÇÉ_SIF_MDifferentiable
  bdd_at_infty' := isBoundedAtImInfty_H‚ÇÉ_SIF
}

noncomputable def H‚ÇÑ_MF : ModularForm (Œì 2) 2 := {
  H‚ÇÑ_SIF with
  holo' := H‚ÇÑ_SIF_MDifferentiable
  bdd_at_infty' := isBoundedAtImInfty_H‚ÇÑ_SIF
}

/-- Jacobi identity -/
theorem jacobi_identity (œÑ : ‚Ñç) : (Œò‚ÇÇ œÑ) ^ 4 + (Œò‚ÇÑ œÑ) ^ 4 = (Œò‚ÇÉ œÑ) ^ 4 := by
  rw [‚Üê H‚ÇÇ, ‚Üê H‚ÇÉ, ‚Üê H‚ÇÑ]
  -- prove that the dimension of M‚ÇÇ(Œì(2)) is 2. Compare the first two q-coefficients.
  sorry
