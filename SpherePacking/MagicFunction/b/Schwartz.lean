/-
Copyright (c) 2025 Sidharth Hariharan. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sidharth Hariharan
-/

-- import Mathlib

-- import SpherePacking.ForMathlib.RadialSchwartz.RadialSchwartz
import SpherePacking.MagicFunction.b.Basic

/-! # `b` is a Schwartz Function

The purpose of this file is to prove that `b` is a Schwartz function. It collects results stated elsewhere and presents them concisely.
-/

-- NOTE: We are not ready for the contents of this file. We first need to fix
-- the dimension bridge for Schwartz functions.

#exit

open MagicFunction MagicFunction.b MagicFunction.b.RadialFunctions MagicFunction.b.RealIntegrals
  MagicFunction.Parametrisations

open Set Complex Real SchwartzMap

open scoped ContDiff

namespace MagicFunction.b.SchwartzProperties

section Smooth

/-! # `b` is smooth.

There is no reference for this in the blueprint. The idea is to use integrability to differentiate
inside the integrals. The proof path I have in mind is the following.

We need to use the Leibniz Integral Rule to differentiate under the integral sign. This is stated as
`hasDerivAt_integral_of_dominated_loc_of_deriv_le` in `Mathlib.Analysis.Calculus.ParametricIntegral`
-/

theorem J‚ÇÅ'_smooth' : ContDiff ‚Ñù ‚àû RealIntegrals.J‚ÇÅ' := by
  sorry

theorem J‚ÇÇ'_smooth' : ContDiff ‚Ñù ‚àû RealIntegrals.J‚ÇÇ' := by
  sorry

theorem J‚ÇÉ'_smooth' : ContDiff ‚Ñù ‚àû RealIntegrals.J‚ÇÉ' := by
  sorry

theorem I‚ÇÑ'_smooth' : ContDiff ‚Ñù ‚àû RealIntegrals.I‚ÇÑ' := by
  sorry

theorem I‚ÇÖ'_smooth' : ContDiff ‚Ñù ‚àû RealIntegrals.I‚ÇÖ' := by
  sorry

theorem J‚ÇÜ'_smooth' : ContDiff ‚Ñù ‚àû RealIntegrals.J‚ÇÜ' := by
  sorry

end Smooth

section Decay

/-! # `b` decays faster than any inverse power of the norm squared.

We follow the proof of Proposition 7.8 in the blueprint.
-/

theorem J‚ÇÅ'_decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù),
    ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n RealIntegrals.J‚ÇÅ' x‚Äñ ‚â§ C := by
  sorry

theorem J‚ÇÇ'_decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù),
    ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n RealIntegrals.J‚ÇÇ' x‚Äñ ‚â§ C := by
  sorry

theorem J‚ÇÉ'_decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù),
    ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n RealIntegrals.J‚ÇÉ' x‚Äñ ‚â§ C := by
  sorry

theorem I‚ÇÑ'_decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù),
    ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n I‚ÇÑ' x‚Äñ ‚â§ C := by
  sorry

theorem I‚ÇÖ'_decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù),
    ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n I‚ÇÖ' x‚Äñ ‚â§ C := by
  sorry

theorem J‚ÇÜ'_decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù),
    ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n J‚ÇÜ' x‚Äñ ‚â§ C := by
  sorry

end Decay

end MagicFunction.b.SchwartzProperties

noncomputable section SchwartzMap

namespace MagicFunction.b.SchwartzIntegrals

def J‚ÇÅ' : ùì¢(‚Ñù, ‚ÑÇ) where
  toFun := MagicFunction.b.RealIntegrals.J‚ÇÅ'
  smooth' := MagicFunction.b.SchwartzProperties.J‚ÇÅ'_smooth'
  decay' := MagicFunction.b.SchwartzProperties.J‚ÇÅ'_decay'

def J‚ÇÇ' : ùì¢(‚Ñù, ‚ÑÇ) where
  toFun := MagicFunction.b.RealIntegrals.J‚ÇÇ'
  smooth' := MagicFunction.b.SchwartzProperties.J‚ÇÇ'_smooth'
  decay' := MagicFunction.b.SchwartzProperties.J‚ÇÇ'_decay'

def J‚ÇÉ' : ùì¢(‚Ñù, ‚ÑÇ) where
  toFun := MagicFunction.b.RealIntegrals.J‚ÇÉ'
  smooth' := MagicFunction.b.SchwartzProperties.J‚ÇÉ'_smooth'
  decay' := MagicFunction.b.SchwartzProperties.J‚ÇÉ'_decay'

def I‚ÇÑ' : ùì¢(‚Ñù, ‚ÑÇ) where
  toFun := MagicFunction.b.RealIntegrals.I‚ÇÑ'
  smooth' := MagicFunction.b.SchwartzProperties.I‚ÇÑ'_smooth'
  decay' := MagicFunction.b.SchwartzProperties.I‚ÇÑ'_decay'

def I‚ÇÖ' : ùì¢(‚Ñù, ‚ÑÇ) where
  toFun := MagicFunction.b.RealIntegrals.I‚ÇÖ'
  smooth' := MagicFunction.b.SchwartzProperties.I‚ÇÖ'_smooth'
  decay' := MagicFunction.b.SchwartzProperties.I‚ÇÖ'_decay'

def J‚ÇÜ' : ùì¢(‚Ñù, ‚ÑÇ) where
  toFun := MagicFunction.b.RealIntegrals.J‚ÇÜ'
  smooth' := MagicFunction.b.SchwartzProperties.J‚ÇÜ'_smooth'
  decay' := MagicFunction.b.SchwartzProperties.J‚ÇÜ'_decay'

def J‚ÇÅ : ùì¢(EuclideanSpace ‚Ñù (Fin 8), ‚ÑÇ) :=
  schwartzMap_multidimensional_of_schwartzMap_real (EuclideanSpace ‚Ñù (Fin 8)) J‚ÇÅ'

def J‚ÇÇ : ùì¢(EuclideanSpace ‚Ñù (Fin 8), ‚ÑÇ) :=
  schwartzMap_multidimensional_of_schwartzMap_real (EuclideanSpace ‚Ñù (Fin 8)) J‚ÇÇ'

def J‚ÇÉ : ùì¢(EuclideanSpace ‚Ñù (Fin 8), ‚ÑÇ) :=
  schwartzMap_multidimensional_of_schwartzMap_real (EuclideanSpace ‚Ñù (Fin 8)) J‚ÇÉ'

def I‚ÇÑ : ùì¢(EuclideanSpace ‚Ñù (Fin 8), ‚ÑÇ) :=
  schwartzMap_multidimensional_of_schwartzMap_real (EuclideanSpace ‚Ñù (Fin 8)) I‚ÇÑ'

def I‚ÇÖ : ùì¢(EuclideanSpace ‚Ñù (Fin 8), ‚ÑÇ) :=
  schwartzMap_multidimensional_of_schwartzMap_real (EuclideanSpace ‚Ñù (Fin 8)) I‚ÇÖ'

def J‚ÇÜ : ùì¢(EuclideanSpace ‚Ñù (Fin 8), ‚ÑÇ) :=
  schwartzMap_multidimensional_of_schwartzMap_real (EuclideanSpace ‚Ñù (Fin 8)) J‚ÇÜ'

end MagicFunction.b.SchwartzIntegrals

namespace MagicFunction.FourierEigenfunctions

/-- The radial component of the -1-Fourier Eigenfunction of Viazovska's Magic Function. -/
@[simps!]
def a' : ùì¢(‚Ñù, ‚ÑÇ) :=
    MagicFunction.b.SchwartzIntegrals.J‚ÇÅ'
  + MagicFunction.b.SchwartzIntegrals.J‚ÇÇ'
  + MagicFunction.b.SchwartzIntegrals.J‚ÇÉ'
  + MagicFunction.b.SchwartzIntegrals.I‚ÇÑ'
  + MagicFunction.b.SchwartzIntegrals.I‚ÇÖ'
  + MagicFunction.b.SchwartzIntegrals.J‚ÇÜ'

/-- The -1-Fourier Eigenfunction of Viazovska's Magic Function. -/
@[simps!]
def b : ùì¢(EuclideanSpace ‚Ñù (Fin 8), ‚ÑÇ) := schwartzMap_multidimensional_of_schwartzMap_real
  (EuclideanSpace ‚Ñù (Fin 8)) a'

theorem b_eq_sum_integrals_RadialFunctions : b =
    MagicFunction.b.RadialFunctions.J‚ÇÅ
  + MagicFunction.b.RadialFunctions.J‚ÇÇ
  + MagicFunction.b.RadialFunctions.J‚ÇÉ
  + MagicFunction.b.RadialFunctions.I‚ÇÑ
  + MagicFunction.b.RadialFunctions.I‚ÇÖ
  + MagicFunction.b.RadialFunctions.J‚ÇÜ := rfl

theorem b_eq_sum_integrals_SchwartzIntegrals : b =
    MagicFunction.b.SchwartzIntegrals.J‚ÇÅ
  + MagicFunction.b.SchwartzIntegrals.J‚ÇÇ
  + MagicFunction.b.SchwartzIntegrals.J‚ÇÉ
  + MagicFunction.b.SchwartzIntegrals.I‚ÇÑ
  + MagicFunction.b.SchwartzIntegrals.I‚ÇÖ
  + MagicFunction.b.SchwartzIntegrals.J‚ÇÜ := rfl

theorem b'_eq_sum_RealIntegrals : a' =
    MagicFunction.b.RealIntegrals.J‚ÇÅ'
  + MagicFunction.b.RealIntegrals.J‚ÇÇ'
  + MagicFunction.b.RealIntegrals.J‚ÇÉ'
  + MagicFunction.b.RealIntegrals.I‚ÇÑ'
  + MagicFunction.b.RealIntegrals.I‚ÇÖ'
  + MagicFunction.b.RealIntegrals.J‚ÇÜ' := rfl

end MagicFunction.FourierEigenfunctions

end SchwartzMap
