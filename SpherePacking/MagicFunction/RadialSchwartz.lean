import Mathlib

open SchwartzMap Function

section Aux

lemma hasTemperateGrowth_norm_sq {d : ‚Ñï} :
    HasTemperateGrowth (fun (x : EuclideanSpace ‚Ñù (Fin d)) ‚Ü¶ ‚Äñx‚Äñ ^ 2) := by
  refine @Function.HasTemperateGrowth.of_fderiv (EuclideanSpace ‚Ñù (Fin d)) ‚Ñù _ _ _ _
    (fun x ‚Ü¶ ‚Äñx‚Äñ ^ 2) ?_ (Differentiable.norm_sq ‚Ñù differentiable_id) 2 1 ?_
  ¬∑ sorry
  ¬∑ intro x
    simp only [norm_pow, norm_norm, pow_one, one_mul, pow_two, norm_mul]
    suffices : ‚Äñx‚Äñ ‚â§ 1 + ‚Äñx‚Äñ
    ¬∑
      sorry
    sorry

lemma le_one_add_sq_of_nonneg {x : ‚Ñù} : x ‚â§ 1 + x ^ 2 := by nlinarith

end Aux

-- @[simps!]
-- noncomputable def schwartzMap_multidimensional_of_schwartzMap_real (d : ‚Ñï) (f : ùì¢(‚Ñù, ‚ÑÇ)) :
--     ùì¢((EuclideanSpace ‚Ñù (Fin d)), ‚ÑÇ) := f.compCLM ‚Ñù _ _


noncomputable def schwartzMap_multidimensional_of_schwartzMap_real' (d : ‚Ñï) (f : ùì¢(‚Ñù, ‚ÑÇ)) :
    ùì¢((EuclideanSpace ‚Ñù (Fin d)), ‚ÑÇ) where
  toFun := fun x ‚Ü¶ f (‚Äñx‚Äñ ^ 2) -- f ‚àò norm
  smooth' := f.smooth'.comp (contDiff_id.norm_sq ‚Ñù)
  decay' := by
    intro k n
    if hk : Even k then
    ¬∑ obtain ‚ü®m, hm‚ü© := hk
      obtain ‚ü®C, hC‚ü© := f.decay' m n
      induction' n with n hn
      ¬∑ -- Base Case
        use C
        intro x
        specialize hC (‚Äñx‚Äñ ^ 2)
        simp only [norm_pow, norm_norm, norm_iteratedFDeriv_zero, Complex.norm_eq_abs] at hC ‚ä¢
        suffices : ‚Äñx‚Äñ ^ k * Complex.abs (f (‚Äñx‚Äñ ^ 2)) =
          (‚Äñx‚Äñ ^ 2) ^ m * Complex.abs (f.toFun (‚Äñx‚Äñ ^ 2))
        ¬∑ rw [this]
          exact hC
        simp only [‚Üê pow_mul, two_mul, ‚Üê hm, mul_eq_mul_left_iff, pow_eq_zero_iff', norm_eq_zero,
          ne_eq]
        left
        rfl
      ¬∑ -- Inductive Case
        use C
        intro x
        sorry
    else
    ¬∑ rw [Nat.not_even_iff_odd] at hk
      obtain ‚ü®m, hm‚ü© := hk

      sorry
    stop
    obtain ‚ü®C, hC‚ü© := f.decay' k n
    use C
    intro x
    specialize hC (‚Äñx‚Äñ ^ 2)
    -- I believe this is true...
    sorry
