import Mathlib

open SchwartzMap

section Aux

theorem norm_iteratedDeriv_multidimensional_le_const_mul_abs_nthDeriv_real {d : ‚Ñï} (f : ùì¢(‚Ñù, ‚ÑÇ))
    (x : EuclideanSpace ‚Ñù (Fin d)) (n : ‚Ñï) {k' : ‚Ñï} {C : ‚Ñù}
    (hC : ‚àÄ (x : ‚Ñù), ‚Äñx‚Äñ ^ (k') * ‚ÄñiteratedFDeriv ‚Ñù n f.toFun x‚Äñ ‚â§ C) :
    ‚àÉ (D : ‚Ñù), ‚ÄñiteratedFDeriv ‚Ñù 0 (fun x ‚Ü¶ f (‚Äñx‚Äñ ^ 2)) x‚Äñ
    ‚â§ D * Complex.abs (iteratedDeriv n f (‚Äñx‚Äñ ^ 2)) := by
  induction' n with n hn
  ¬∑ sorry
  ¬∑ sorry

end Aux

noncomputable def schwartzMap_multidimensional_of_schwartzMap_real (d : ‚Ñï) (f : ùì¢(‚Ñù, ‚ÑÇ)) :
    ùì¢((EuclideanSpace ‚Ñù (Fin d)), ‚ÑÇ) where
  toFun := fun x ‚Ü¶ f (‚Äñx‚Äñ ^ 2) -- f ‚àò norm
  smooth' := f.smooth'.comp (contDiff_id.norm_sq ‚Ñù)
  decay' := by
    intro k n
    if hk : Even k then
    ¬∑ obtain ‚ü®m, hm‚ü© := hk
      obtain ‚ü®C, hC‚ü© := f.decay' m n
      induction' n with n hn
      ¬∑ use C
        intro x
        specialize hC (‚Äñx‚Äñ ^ 2)
        simp only [norm_pow, norm_norm, norm_iteratedFDeriv_zero, Complex.norm_eq_abs] at hC ‚ä¢
        suffices : ‚Äñx‚Äñ ^ k * Complex.abs (f (‚Äñx‚Äñ ^ 2)) =
          (‚Äñx‚Äñ ^ 2) ^ m * Complex.abs (f.toFun (‚Äñx‚Äñ ^ 2))
        ¬∑ rw [this]
          exact hC
        simp only [‚Üê pow_mul, two_mul, ‚Üê hm, mul_eq_mul_left_iff, pow_eq_zero_iff', norm_eq_zero,
          ne_eq]
        left
        rfl
      ¬∑ use C
        intro x

        sorry
    else
    ¬∑ rw [Nat.not_even_iff_odd] at hk
      obtain ‚ü®m, hm‚ü© := hk

      sorry
    stop
    obtain ‚ü®C, hC‚ü© := f.decay' k n
    use C
    intro x
    specialize hC (‚Äñx‚Äñ ^ 2)
    -- I believe this is true...
    sorry
