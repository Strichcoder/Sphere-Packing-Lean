import Mathlib.Analysis.Distribution.SchwartzSpace
import Mathlib.Analysis.InnerProductSpace.Calculus
import Mathlib.Data.Real.StarOrdered
import Mathlib.Analysis.Calculus.ContDiff.Bounds

open SchwartzMap Function RCLike

section SchwartzMap_multidimensional_of_schwartzMap_real

variable {F : Type*} [NormedAddCommGroup F] [InnerProductSpace ‚Ñù F]

lemma hasFDerivAt_norm_sq {x : F} :
  HasFDerivAt (fun x ‚Ü¶ ‚Äñx‚Äñ ^ 2) (2 ‚Ä¢ ((innerSL ‚Ñù) x)) x := (hasFDerivAt_id x).norm_sq

lemma differentiableAt_norm_sq {x : F} :
  DifferentiableAt ‚Ñù (fun x ‚Ü¶ ‚Äñx‚Äñ ^ 2) x := hasFDerivAt_norm_sq.differentiableAt

lemma differentiable_norm_sq :
  Differentiable ‚Ñù (fun (x : F) ‚Ü¶ ‚Äñx‚Äñ ^ 2) := fun _ => differentiableAt_norm_sq

lemma fderiv_norm_sq {x : F} :
  fderiv ‚Ñù (fun x ‚Ü¶ ‚Äñx‚Äñ ^ 2) x = 2 ‚Ä¢ ((innerSL ‚Ñù) x) := hasFDerivAt_norm_sq.fderiv

lemma hasTemperateGrowth_norm_sq :
    HasTemperateGrowth (fun (x :F) ‚Ü¶ ‚Äñx‚Äñ ^ 2) := by
  refine Function.HasTemperateGrowth.of_fderiv ?_ differentiable_norm_sq (k := 2) (C := 1) ?_
  ¬∑ convert (2 ‚Ä¢ (innerSL ‚Ñù)).hasTemperateGrowth
    ext
    simp [fderiv_norm_sq]
  ¬∑ intro x
    rw [norm_pow, norm_norm, one_mul, sq_le_sq, abs_norm, abs_of_nonneg (by positivity)]
    linear_combination

variable (F : Type*) [NormedAddCommGroup F] [InnerProductSpace ‚Ñù F] (f : ùì¢(‚Ñù, ‚ÑÇ))

@[simps!]
noncomputable def schwartzMap_multidimensional_of_schwartzMap_real : ùì¢(F, ‚ÑÇ) :=
    f.compCLM ‚Ñù hasTemperateGrowth_norm_sq <| by
  use 1, 1
  intro _
  simp only [norm_pow, norm_norm]
  nlinarith

end SchwartzMap_multidimensional_of_schwartzMap_real

section SchwartzMap_multidimensional_of_schwartzLike_real

open Set

open scoped ContDiff

-- variable {F : Type*} [NormedAddCommGroup F] [InnerProductSpace ‚Ñù F]
variable {g : ‚Ñù ‚Üí ‚ÑÇ} (d : ‚Ñï) (hContDiffOn : ContDiffOn ‚Ñù ‚àû g (Ici (0 : ‚Ñù)))
  (hdecay : ‚àÄ k n : ‚Ñï, ‚àÉ C : ‚Ñù, ‚àÄ x ‚àà (Ici (0 : ‚Ñù)), ‚Äñx‚Äñ ^ ((k : ‚Ñù) / 2) *
    ‚ÄñiteratedFDerivWithin ‚Ñù n g (Ici 0) x‚Äñ ‚â§ C)

include hContDiffOn in
lemma ContDiffOn.comp_norm_sq_smooth :  -- More general version possible but for now unnecessary
    ContDiff ‚Ñù ‚àû (fun (x : EuclideanSpace ‚Ñù (Fin d)) ‚Ü¶ g (‚Äñx‚Äñ ^ 2)) :=
  hContDiffOn.comp_contDiff (contDiff_norm_sq ‚Ñù) <| by simp

-- To match with `norm_iteratedFDerivWithin_comp_le`
local notation "f" => fun (x : EuclideanSpace ‚Ñù (Fin d)) ‚Ü¶ ‚Äñx‚Äñ ^ 2
local notation "s" => (‚ä§ : Set (EuclideanSpace ‚Ñù (Fin d)))
local notation "t" => (Ici (0 : ‚Ñù) : Set ‚Ñù)

private lemma hf : ContDiffOn ‚Ñù ‚àû f s := (contDiff_norm_sq ‚Ñù).contDiffOn
private lemma hn (n : ‚Ñï) : n ‚â§ ‚àû := right_eq_inf.mp rfl
private lemma ht : UniqueDiffOn ‚Ñù t := uniqueDiffOn_Ici 0
private lemma hs : UniqueDiffOn ‚Ñù s := uniqueDiffOn_univ
private lemma hst : Set.MapsTo f s t := fun _ _ => by simp

private lemma hD (x : EuclideanSpace ‚Ñù (Fin d)) (n : ‚Ñï) : ‚àÄ i : ‚Ñï, 1 ‚â§ i ‚Üí i ‚â§ n ‚Üí
    ‚ÄñiteratedFDerivWithin ‚Ñù i f s x‚Äñ ‚â§ 2 ^ i := by
  have hnorm_eq (y : EuclideanSpace ‚Ñù (Fin d)) : ‚Äñy‚Äñ ^ 2 = inner ‚Ñù y y := by
    simp only [PiLp.norm_sq_eq_of_L2, Real.norm_eq_abs, sq_abs, PiLp.inner_apply, inner_apply,
      conj_trivial]
    congr; ext; ring
  have hinner_eq_innerSL (a b : EuclideanSpace ‚Ñù (Fin d)) : inner ‚Ñù a b = innerSL ‚Ñù a b := rfl
  intro i hi‚ÇÅ hi‚ÇÇ
  rw [iteratedFDerivWithin_eq_iteratedFDeriv]
  ¬∑ have h‚ÇÅ : ContDiff ‚Ñù ‚àû (fun (x : EuclideanSpace ‚Ñù (Fin d)) ‚Ü¶ x) := contDiff_id
    simp only [hnorm_eq, hinner_eq_innerSL]
    have h‚ÇÇ : ‚ÄñinnerSL ‚Ñù‚Äñ ‚â§ 1 := norm_innerSL_le (E := EuclideanSpace ‚Ñù (Fin d)) ‚Ñù
    have h‚ÇÉ : i ‚â§ ‚àû := right_eq_inf.mp rfl
    have h‚ÇÑ :=
      ContinuousLinearMap.norm_iteratedFDeriv_le_of_bilinear_of_le_one (innerSL ‚Ñù) h‚ÇÅ h‚ÇÅ x h‚ÇÉ h‚ÇÇ
    apply h‚ÇÑ.trans
    have h‚ÇÖ (j : ‚Ñï) : ‚ÄñiteratedFDeriv ‚Ñù j (fun (x : EuclideanSpace ‚Ñù (Fin d)) ‚Ü¶ x) x‚Äñ = 1 := by
      -- Why is this not obvious?
      sorry
    simp only [h‚ÇÖ, mul_one]
    norm_cast
    rw [Nat.sum_range_choose i]
  ¬∑ exact uniqueDiffOn_univ
  ¬∑ exact (contDiff_norm_sq ‚Ñù).contDiffAt
  ¬∑ trivial

private lemma h_pow (x : EuclideanSpace ‚Ñù (Fin d)) (k : ‚Ñï) :
    (‚Äñx‚Äñ ^ 2) ^ ((k : ‚Ñù) / 2) = ‚Äñx‚Äñ ^ (k : ‚Ñù) := by
  have h_pow_2 : ‚Äñx‚Äñ ^ 2 = ‚Äñx‚Äñ ^ (2 : ‚Ñù) := by norm_cast
  rw [h_pow_2, ‚Üê Real.rpow_mul (by positivity)]
  field_simp

include hdecay in
private lemma hC (n k : ‚Ñï) : ‚àÉ C : ‚Ñù, ‚àÄ (x : EuclideanSpace ‚Ñù (Fin d)), ‚àÄ i ‚â§ n,
    (‚Äñx‚Äñ ^ k) * ‚ÄñiteratedFDerivWithin ‚Ñù i g t (f x)‚Äñ ‚â§ C := by
  -- I know that given some k, for all n, there is a C‚Çô such that ‚Äñderiv‚Äñ ‚â§ C‚Çô / (‚Äñx‚Äñ ^ (k / 2))
  -- Simply define C to be the max of all C·µ¢ for 0 ‚â§ i ‚â§ n
  -- Copilot did the first few lines
  choose! C hC using hdecay k
  let Cmax := Finset.range (n + 1) |>.sup' (by simp) C
  use Cmax
  intro x i hi
  specialize hC i (‚Äñx‚Äñ ^ 2)
  simp only [mem_Ici, norm_nonneg, pow_nonneg, norm_pow, norm_norm, forall_const, h_pow] at hC
  have hCi : C i ‚â§ Cmax := Finset.le_sup' C <| Finset.mem_range_succ_iff.mpr hi
  simp only
  have := hC.trans hCi
  norm_cast at this

include hContDiffOn in
private lemma hsmooth : ContDiff ‚Ñù ‚àû fun (x : EuclideanSpace ‚Ñù (Fin d)) ‚Ü¶ g (‚Äñx‚Äñ ^ 2) :=
  hContDiffOn.comp_norm_sq_smooth d

noncomputable def schwartzMap_multidimensional_of_schwartzLike_real :
    ùì¢(EuclideanSpace ‚Ñù (Fin d), ‚ÑÇ) where
  toFun := fun x ‚Ü¶ g (f x)
  smooth' := hsmooth d hContDiffOn
  decay' := by
    intro k n
    obtain ‚ü®C, hC‚ü© := hC d hdecay n k
    use n.factorial * C * 2 ^ n
    intro x
    specialize hC x
    -- specialize hC (‚Äñx‚Äñ ^ 2)
    -- simp only [mem_Ici, norm_nonneg, pow_nonneg, norm_pow, norm_norm, forall_const] at hC
    -- rw [h_pow d x k, Real.rpow_natCast] at hC
    rw [‚Üê iteratedFDerivWithin_eq_iteratedFDeriv uniqueDiffOn_univ
      (ContDiff.contDiffAt <| (contDiff_infty.mp (hsmooth d hContDiffOn)) n) (mem_univ x)]
    wlog hk_ne_zero : k ‚â† 0
    ¬∑ simp only [ne_eq, Decidable.not_not] at hk_ne_zero
      simp only [hk_ne_zero, pow_zero, one_mul] at hC ‚ä¢
      exact norm_iteratedFDerivWithin_comp_le hContDiffOn (hf d) (hn n) ht (hs d) (hst d) (x := x)
        (by simp) hC (hD d x n)
    wlog hx_ne_zero : x ‚â† 0
    ¬∑ simp only [ne_eq, Decidable.not_not] at hx_ne_zero
      specialize hC n le_rfl
      rw [hx_ne_zero, norm_zero, zero_pow hk_ne_zero, zero_mul] at hC ‚ä¢
      positivity
    have hx_pos : 0 < ‚Äñx‚Äñ ^ k := by positivity
    have hC' : ‚àÄ i ‚â§ n,
        ‚ÄñiteratedFDerivWithin ‚Ñù i g (Ici 0) ((fun x ‚Ü¶ ‚Äñx‚Äñ ^ 2) x)‚Äñ ‚â§ C / (‚Äñx‚Äñ ^ k) := by
      intro i hi
      specialize hC i hi
      rw [mul_comm, ‚Üê le_div_iff‚ÇÄ hx_pos (c := ‚Äñx‚Äñ ^ k) (b := C)] at hC
      exact hC
    conv_lhs => rw [mul_comm]
    rw [‚Üê le_div_iff‚ÇÄ hx_pos (c := ‚Äñx‚Äñ ^ k)]
    have hrearrange : n.factorial * C * 2 ^ n / ‚Äñx‚Äñ ^ k = ‚Üën.factorial * (C / ‚Äñx‚Äñ ^ k) * 2 ^ n := by
      field_simp
    rw [hrearrange]
    exact norm_iteratedFDerivWithin_comp_le hContDiffOn (hf d) (hn n) ht (hs d) (hst d) (x := x)
      (by simp) hC' (hD d x n)

example (h : ‚Ñù ‚Üí ‚Ñù) : ContDiff ‚Ñù ‚àû h ‚Üí ‚àÄ n : ‚Ñï, ContDiff ‚Ñù ‚Üën h := by
  rw [contDiff_infty]
  exact fun h n ‚Ü¶ h n

example (n d : ‚Ñï) (x : EuclideanSpace ‚Ñù (Fin d)) (g : EuclideanSpace ‚Ñù (Fin d) ‚Üí ‚Ñù)
    (h : ContDiffOn ‚Ñù n g ‚ä§) :
    iteratedFDeriv ‚Ñù n g x = iteratedFDerivWithin ‚Ñù n g (‚ä§ : Set (EuclideanSpace ‚Ñù (Fin d))) x :=
  Eq.symm (iteratedFDerivWithin_eq_iteratedFDeriv uniqueDiffOn_univ (h x trivial) trivial)

end SchwartzMap_multidimensional_of_schwartzLike_real
