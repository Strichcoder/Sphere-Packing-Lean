import Mathlib

/-! # Deforming Paths of Integration for Open Contours

In this file, we prove that if a function tends to zero as the imaginary part of its input tends to
infinity, then
-/

open Set Real Complex intervalIntegral Metric Filter MeasureTheory

open scoped Interval Topology

namespace Complex

section aux

-- WHY ARE THESE NOT JUST `exact?`????!!!!
theorem re_of_real_add_real_mul_I (x y : ‚Ñù) : (x + y * I).re = x := by simp
theorem im_of_real_add_real_mul_I (x y : ‚Ñù) : (x + y * I).im = y := by simp

end aux

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚ÑÇ E] [CompleteSpace E]
  {f : ‚ÑÇ ‚Üí E} (x‚ÇÅ x‚ÇÇ y : ‚Ñù) (hlt : x‚ÇÅ < x‚ÇÇ) (hcont : ContinuousOn f ([[x‚ÇÅ, x‚ÇÇ]] √ó‚ÑÇ (Ici y)))
  -- (htendsto : ‚àÄ (x : ‚Ñù), Tendsto (fun (y : ‚Ñù) ‚Ü¶ f (x + y * I)) atTop (ùìù 0)) -- This is rubbish
  -- How do I express the following condition using filters? Is it even possible?
  (htendsto : ‚àÄ Œµ > 0, ‚àÉ M : ‚Ñù, ‚àÄ z : ‚ÑÇ, M ‚â§ z.im ‚Üí ‚Äñf z‚Äñ < Œµ)
  (s : Set ‚ÑÇ) (hs : s.Countable)
  (hdiff : ‚àÄ x ‚àà ((Ioo (min x‚ÇÅ x‚ÇÇ) (max x‚ÇÅ x‚ÇÇ)) √ó‚ÑÇ (Iio y)) \ s, DifferentiableAt ‚ÑÇ f x)

omit [CompleteSpace E] in
include htendsto in
/-- If $f(z) \to 0$ as $\Im(z) \to \infty$, then
  $\lim_{m \to \infty} \int_{x_1}^{x_2} f(x + mI) dx = 0$. -/
lemma tendsto_integral_atTop_nhds_zero_of_tendsto_im_atTop_nhds_zero :
    Tendsto (fun (m : ‚Ñù) ‚Ü¶ ‚à´ (x : ‚Ñù) in x‚ÇÅ..x‚ÇÇ, f (x + m * I)) atTop (ùìù 0) := by
  wlog hne : x‚ÇÅ ‚â† x‚ÇÇ
  ¬∑ rw [ne_eq, Decidable.not_not] at hne
    simp only [hne, integral_same, tendsto_const_nhds_iff]
  simp only [NormedAddCommGroup.tendsto_nhds_zero, eventually_atTop, ge_iff_le]
  intro Œµ hŒµ
  obtain ‚ü®M, hM‚ü© := htendsto ((1 / 2) * (Œµ / |x‚ÇÇ - x‚ÇÅ|)) <| by
    simp only [one_div, gt_iff_lt, inv_pos, Nat.ofNat_pos, mul_pos_iff_of_pos_left]
    exact (div_pos hŒµ (abs_sub_pos.mpr hne.symm))
  use M
  intro y hy
  calc ‚Äñ‚à´ (x : ‚Ñù) in x‚ÇÅ..x‚ÇÇ, f (‚Üëx + ‚Üëy * I)‚Äñ
  _ ‚â§ ((1 / 2) * (Œµ / |x‚ÇÇ - x‚ÇÅ|)) * |x‚ÇÇ - x‚ÇÅ| :=
      intervalIntegral.norm_integral_le_of_norm_le_const <| by
      intro x hx
      specialize hM (x + y * I)
      rw [im_of_real_add_real_mul_I x y] at hM
      exact le_of_lt (hM hy)
  _ = (1 / 2) * Œµ := by
      rw [mul_assoc]
      have : 0 ‚â† |x‚ÇÇ - x‚ÇÅ| := ne_of_lt (abs_sub_pos.mpr hne.symm)
      field_simp [this]
  _ < Œµ := by linarith

example (x : E) : Tendsto (fun (_ : ‚Ñù) ‚Ü¶ 0) atTop (ùìù x) ‚Üí x = 0 := by
  rw [tendsto_const_nhds_iff]
  exact Eq.symm

#check integral_boundary_rect_eq_zero_of_differentiable_on_off_countable
#check intervalIntegral_tendsto_integral_Ioi

include hlt hcont htendsto s hs hdiff in
theorem integral_boundary_open_rect_eq_zero_of_differentiable_on_off_countable :
    (‚à´ (x : ‚Ñù) in x‚ÇÅ..x‚ÇÇ, f (x + y * I))
    + (I ‚Ä¢ ‚à´ (t : ‚Ñù) in Ioi y, f (x‚ÇÇ + t * I))
    - (I ‚Ä¢ ‚à´ (t : ‚Ñù) in Ioi y, f (x‚ÇÅ + t * I))
    = 0 := by
  symm
  rw [‚Üê tendsto_const_nhds_iff (X := E) (Y := ‚Ñù) (l := atTop) (c := 0)]
  have hzero : (fun (m : ‚Ñù) ‚Ü¶
      (‚à´ (x : ‚Ñù) in x‚ÇÅ..x‚ÇÇ, f (x + y * I))
      - (‚à´ (x : ‚Ñù) in x‚ÇÅ..x‚ÇÇ, f (x + m * I))
      + (I ‚Ä¢ ‚à´ (t : ‚Ñù) in y..m, f (x‚ÇÇ + t * I))
      - (I ‚Ä¢ ‚à´ (t : ‚Ñù) in y..m, f (x‚ÇÅ + t * I)))
    = (fun (m : ‚Ñù) ‚Ü¶ 0) := by
    ext m
    calc _
    _ = (((‚à´ (t : ‚Ñù) in (x‚ÇÅ + y * I).re..(x‚ÇÇ + m * I).re, f (t + (x‚ÇÅ + y * I).im * I))
        - ‚à´ (t : ‚Ñù) in (x‚ÇÅ + y * I).re..(x‚ÇÇ + m * I).re, f (t + (x‚ÇÇ + m * I).im * I))
        + I ‚Ä¢ ‚à´ (t : ‚Ñù) in (x‚ÇÅ + y * I).im..(x‚ÇÇ + m * I).im, f ((x‚ÇÇ + m * I).re + t * I))
        - I ‚Ä¢ ‚à´ (t : ‚Ñù) in (x‚ÇÅ + y * I).im..(x‚ÇÇ + m * I).im, f ((x‚ÇÅ + y * I).re + t * I) := by
      simp only [re_of_real_add_real_mul_I x‚ÇÅ y, re_of_real_add_real_mul_I x‚ÇÇ m,
                 im_of_real_add_real_mul_I x‚ÇÅ y, im_of_real_add_real_mul_I x‚ÇÇ m]
    _ = 0 := by
      refine Complex.integral_boundary_rect_eq_zero_of_differentiable_on_off_countable
        f (x‚ÇÅ + y * I) (x‚ÇÇ + m * I) s hs ?_ ?_ <;>
      simp only [re_of_real_add_real_mul_I x‚ÇÅ y, re_of_real_add_real_mul_I x‚ÇÇ m,
                 im_of_real_add_real_mul_I x‚ÇÅ y, im_of_real_add_real_mul_I x‚ÇÇ m]
      ¬∑ apply continuousOn_of_forall_continuousAt
        intro z hz
        specialize hcont z
        sorry
      ¬∑ intro z hz
        specialize hdiff z
        sorry
  rw [‚Üê hzero]
  refine Tendsto.sub (Tendsto.add (Tendsto.sub ?_ ?_) ?_) ?_
  ¬∑ exact tendsto_const_nhds_iff.mpr (integral_of_le (le_of_lt hlt))
  ¬∑ have : (‚à´ (x : ‚Ñù) in Ioc x‚ÇÇ x‚ÇÅ, (fun x ‚Ü¶ f (‚Üëx + ‚Üëy * I)) x ‚àÇvolume) = 0 := by
      refine setIntegral_zero_measure (Œ± := ‚Ñù) (fun x ‚Ü¶ f (‚Üëx + ‚Üëy * I)) ?_
      simp only [volume_Ioc, ENNReal.ofReal_eq_zero, tsub_le_iff_right, zero_add]
      exact le_of_lt hlt
    rw [this]
    exact tendsto_integral_atTop_nhds_zero_of_tendsto_im_atTop_nhds_zero x‚ÇÅ x‚ÇÇ htendsto
  -- For the last two, we need `intervalIntegral_tendsto_integral_Ioi`.
  ¬∑ sorry
  ¬∑
    -- refine MeasureTheory.intervalIntegral_tendsto_integral_Ioi
    --   (f := fun t ‚Ü¶ f (x‚ÇÅ + t * I)) y ?_ tendsto_id

    sorry

#check Tendsto.add
#check Tendsto.sub
#check Filter.tendsto_id
