import SpherePacking.CohnElkies.Prereqs

open scoped FourierTransform ENNReal
open SpherePacking Metric BigOperators Pointwise Filter MeasureTheory Complex Real Zspan

variable {d : ‚Ñï} [Fact (0 < d)] -- Is `Fact` right here?

/-
# Potential Design Complications:

* What we have in Mathlib on Fourier Transforms seems to deal with complex-valued functions. I've
  dealt with it for now by giving an assumption that the imaginary part of `f` is always zero and
  stating everything else in terms of the real part of `f`. The real-valuedness may not even be
  necessary, as we could simply apply the Cohn-Elkies theorem to the real part of any complex-valued
  function whose real part satisfies the Cohn-Elkies Conditions `hCohnElkies‚ÇÅ` and `hCohnElkies‚ÇÇ`.
  If the hypothesis does go unused (as I expect it will), I will remove it.

# TODOs:

* The summations do not seem to be allowing a ‚â† type condition on the index variable. We need this
  in order to be able to split sums up and deem one of the parts nonpositive or something.
* Everything in `Prereqs.lean` is either a TODO or has already been done (eg. in #25) (to reflect
  which the corresponding refs must be updated).
-/

variable {f : EuclideanSpace ‚Ñù (Fin d) ‚Üí ‚ÑÇ} (hPSF : PSF_Conditions f)
variable (hReal : ‚àÄ x : EuclideanSpace ‚Ñù (Fin d), (f x).im = 0)
variable (hCohnElkies‚ÇÅ : ‚àÄ x : EuclideanSpace ‚Ñù (Fin d), ‚Äñx‚Äñ ‚â• 1 ‚Üí (f x).re ‚â§ 0)
variable (hCohnElkies‚ÇÇ : ‚àÄ x : EuclideanSpace ‚Ñù (Fin d), (ùìï f x).re ‚â• 0)

-- We (locally) denote the Complex Conjugate of some `z : ‚ÑÇ` by `conj z`
-- Idea taken from https://github.com/leanprover-community/mathlib4/blob/75cc36e80cb9fe76f894b7688be1e0c792ae55d9/Mathlib/Analysis/Complex/UnitDisc/Basic.lean#L21
local notation "conj" => starRingEnd ‚ÑÇ

section Basis

/-
In this section, we will prove that the density of every periodic sphere packing of separation 1 is
bounded above by the Cohn-Elkies bound.
-/

variable {P : PeriodicSpherePacking d} (hP : P.separation = 1) (b : Basis (Fin d) ‚Ñ§ P.Œõ)

private lemma calc_aux_1 :
  ‚àë' x : P.centers, ‚àë' y : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)), (f (x - ‚Üëy)).re
  ‚â§ ‚Üë(P.numReps' b) * (f 0).re := sorry
  -- calc
  -- ‚àë' x : P.centers, ‚àë' y : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)), (f (x - ‚Üëy)).re
  -- _ = (‚àë' (x : P.centers) (y : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)))
  --     (_ : (y : EuclideanSpace ‚Ñù (Fin d)) ‚â† ‚Üëx),
  --     (f (x - ‚Üëy)).re) +
  --     (‚àë' (x : P.centers) (y : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)))
  --     (_ : (y : EuclideanSpace ‚Ñù (Fin d)) = ‚Üëx),
  --     (f (x - ‚Üëy)).re)
  --       := sorry
  -- _ ‚â§ (‚àë' (x : P.centers) (y : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)))
  --     (_ : (y : EuclideanSpace ‚Ñù (Fin d)) = ‚Üëx),
  --     (f (x - ‚Üëy)).re)
  --       := sorry
  --   _ = ‚àë' (y : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _))), (f (y - ‚Üëy)).re
  --       := sorry
  --   _ = ‚Üë(P.numReps' b) * (f 0).re
  --       := sorry

set_option maxHeartbeats 2000000
private lemma calc_steps :
  ‚Üë(P.numReps' b) * (f 0).re ‚â• ‚Üë(P.numReps' b) ^ 2 * (ùìï f 0).re /
  Zlattice.covolume P.Œõ := calc
  ‚Üë(P.numReps' b) * (f 0).re
  _ ‚â• ‚àë' x : P.centers,
      ‚àë' y : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      (f (x - ‚Üëy)).re
        := by
            rw [ge_iff_le]
            exact calc_aux_1 b
  _ = ‚àë' x : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      ‚àë' y : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      ‚àë' ‚Ñì : P.Œõ, (f (‚Üëx - ‚Üëy + ‚Üë‚Ñì)).re
        :=  by sorry
  -- We now take the real part out so we can apply the PSF-L to the stuff inside.
  -- The idea would be to say, in subsequent lines, that "it suffices to show that the numbers
  -- whose real parts we're taking are equal as complex numbers" and then apply the PSF-L and
  -- other complex-valued stuff.
  _ = (‚àë' x : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      ‚àë' y : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      ‚àë' ‚Ñì : P.Œõ, f (‚Üëx - ‚Üëy + ‚Üë‚Ñì)).re
        := by sorry
  _ = (‚àë' x : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      ‚àë' y : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)), (1 / Zlattice.covolume P.Œõ) *
      ‚àë' m : DualLattice P.Œõ, (ùìï f m) *
      cexp (2 * œÄ * I * ‚ü™‚Üëx - ‚Üëy, (m : EuclideanSpace ‚Ñù (Fin d))‚ü´_‚Ñù)).re
        := by
            -- First, we apply the fact that two sides are equal if they're equal in ‚ÑÇ.
            apply congrArg re
            -- Next, we apply the fact that two sums are equal if their summands are.
            apply congrArg _ _
            ext x
            apply congrArg _ _
            ext y
            -- Now that we've isolated the innermost sum, we can use the PSF-L.
            exact PSF_L P.Œõ hPSF (x - ‚Üëy)
  _ = ((1 / Zlattice.covolume P.Œõ) * ‚àë' m : DualLattice P.Œõ, (ùìï f m).re * (
      ‚àë' x : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      ‚àë' y : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      cexp (2 * œÄ * I * ‚ü™‚Üëx - ‚Üëy, (m : EuclideanSpace ‚Ñù (Fin d))‚ü´_‚Ñù))).re
        := by
            apply congrArg re
            sorry
  _ = ((1 / Zlattice.covolume P.Œõ) * ‚àë' m : DualLattice P.Œõ, (ùìï f m).re * (
      ‚àë' x : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      ‚àë' y : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      cexp (2 * œÄ * I * ‚ü™‚Üëx, (m : EuclideanSpace ‚Ñù (Fin d))‚ü´_‚Ñù) *
      cexp (2 * œÄ * I * ‚ü™-‚Üëy, (m : EuclideanSpace ‚Ñù (Fin d))‚ü´_‚Ñù))).re
        := by
            -- As before, we have to go through a bunch of `congrArg`s to isolate the expressions we
            -- are really trying to show are equal.
            apply congrArg re
            apply congrArg _ _
            apply congrArg _ _
            ext m
            apply congrArg _ _
            apply congrArg _ _
            ext x
            apply congrArg _ _
            ext y

            sorry
  _ = ((1 / Zlattice.covolume P.Œõ) * ‚àë' m : DualLattice P.Œõ, (ùìï f m).re *
      (‚àë' x : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      cexp (2 * œÄ * I * ‚ü™‚Üëx, (m : EuclideanSpace ‚Ñù (Fin d))‚ü´_‚Ñù)) *
      (‚àë' y : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      cexp (-(2 * œÄ * I * ‚ü™‚Üëy, (m : EuclideanSpace ‚Ñù (Fin d))‚ü´_‚Ñù)))).re
        := by sorry
  _ = ((1 / Zlattice.covolume P.Œõ) * ‚àë' m : DualLattice P.Œõ, (ùìï f m).re *
      (‚àë' x : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      cexp (2 * œÄ * I * ‚ü™‚Üëx, (m : EuclideanSpace ‚Ñù (Fin d))‚ü´_‚Ñù)) *
      conj (‚àë' x : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      cexp (2 * œÄ * I * ‚ü™‚Üëx, (m : EuclideanSpace ‚Ñù (Fin d))‚ü´_‚Ñù)) -- Need its complex conjugate
      ).re
        := by sorry
  _ = (1 / Zlattice.covolume P.Œõ) * ‚àë' m : DualLattice P.Œõ, (ùìï f m).re *
      (‚àë' x : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      Complex.abs (cexp (2 * œÄ * I * ‚ü™‚Üëx, (m : EuclideanSpace ‚Ñù (Fin d))‚ü´_‚Ñù)) ^ 2)
        := by sorry
  _ = (1 / Zlattice.covolume P.Œõ) * (
      (‚àë' (m : DualLattice P.Œõ) , (ùìï f m).re * -- Need to add a `(hm : m ‚â† 0)` into the sum
      (‚àë' x : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      Complex.abs (cexp (2 * œÄ * I * ‚ü™‚Üëx, (m : EuclideanSpace ‚Ñù (Fin d))‚ü´_‚Ñù)) ^ 2))
      +
      (ùìï f (0 : EuclideanSpace ‚Ñù (Fin d))).re *
      (‚àë' x : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      Complex.abs (cexp (2 * œÄ * I * ‚ü™‚Üëx, (0 : EuclideanSpace ‚Ñù (Fin d))‚ü´_‚Ñù)) ^ 2))
        := by sorry
  _ ‚â• (1 / Zlattice.covolume P.Œõ) * (ùìï f (0 : EuclideanSpace ‚Ñù (Fin d))).re *
      (‚àë' x : ‚Üë(P.centers ‚à© fundamentalDomain (b.ofZlatticeBasis ‚Ñù _)),
      Complex.abs (cexp (2 * œÄ * I * ‚ü™‚Üëx, (0 : EuclideanSpace ‚Ñù (Fin d))‚ü´_‚Ñù)) ^ 2)
        := sorry
  _ = (1 / Zlattice.covolume P.Œõ) * (ùìï f (0 : EuclideanSpace ‚Ñù (Fin d))).re *
      ‚Üë(P.numReps' b) ^ 2
        := by sorry
  _ = ‚Üë(P.numReps' b) ^ 2 * (ùìï f 0).re /
  Zlattice.covolume P.Œõ volume
        := by sorry

theorem LinearProgrammingBound' : P.density ‚â§
  (f 0).re / (ùìï f 0).re * volume (ball (0 : EuclideanSpace ‚Ñù (Fin d)) (1 / 2)) := by
  rw [P.periodic_density_formula' b]
  suffices hCalc : (P.numReps' b) * (f 0).re ‚â• (P.numReps' b)^2 * (ùìï f 0).re / Zlattice.covolume P.Œõ
  ¬∑ rw [hP]
    rw [ge_iff_le] at hCalc
    cases eq_or_ne (ùìï f 0) 0
    ¬∑ case inl hùìïf =>
      rw [hùìïf]
      -- simp only [zero_re, div_zero]
      -- Why does `div_zero` replace the value with `0` instead of `‚ä§`? I'd like `‚ä§`!
      have h : ‚àÄ a : ENNReal, a / 0 = ‚ä§ := by
        
        sorry
      sorry
    ¬∑ case inr hùìïf =>
      sorry
  exact calc_steps hPSF b

end Basis

section Basis_Independent

theorem LinearProgrammingBound : SpherePackingConstant d ‚â§
  (f 0).re / (ùìï f 0).re * volume (ball (0 : EuclideanSpace ‚Ñù (Fin d)) (1 / 2)) := by
  rw [‚Üê periodic_constant_eq_constant (Fact.out),
    periodic_constant_eq_periodic_constant_normalized (Fact.out)]
  apply iSup_le
  intro P
  rw [iSup_le_iff]
  intro hP
  -- We choose a ‚Ñ§-basis for the lattice and feed it into `LinearProgramingBound'`.
  exact LinearProgrammingBound' hPSF hP (((Zlattice.module_free ‚Ñù P.Œõ).chooseBasis).reindex
    (PeriodicSpherePacking.basis_index_equiv P))

end Basis_Independent
